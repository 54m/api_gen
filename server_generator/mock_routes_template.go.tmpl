// +build mock
// Code generated by server_generator. DO NOT EDIT.
// generated version: {{ .AppVersion }}

package {{ .Package }}

import (
	"net/http"

	"github.com/labstack/echo/v4"

	props "{{ .ControllerPropsPackage }}"
)

// MockRoutes ...
type MockRoutes struct {
	router *echo.Group
}

// apiGenMockOption api-gen mock options
type apiGenMockOption struct {
	File string `json:"file"`
}

// NewRoutes ...
func NewMockRoutes(p *props.ControllerProps, router *echo.Group) *MockRoutes {
	r := &MockRoutes{
		router: router,
	}
{{- range .Controllers }}
	router.{{ .HTTPMethod }}("{{ .Endpoint }}", r.{{ .HandlerName }}(p))
{{- end }}
	return r
}
{{ range .Controllers }}
// {{ .HandlerName }} ...
func (r *MockRoutes) {{ .HandlerName }}(p *props.ControllerProps) echo.HandlerFunc {
	return func(c echo.Context) error {
		req := new({{ .RequestStructName }})
		if err := c.Bind(req); err != nil {
			return c.JSON(http.StatusBadRequest, map[string]interface{}{
				"code":    http.StatusBadRequest,
				"message": "invalid request.",
			})
		}

		option := &apiGenMockOption{}
		xago := c.Request().Header.Get("X-Api-Gen-Option")
		if xago != "" {
			if err := json.Unmarshal([]byte(xago), option); err != nil {
				return c.JSON(http.StatusBadRequest, map[string]interface{}{
					"code":    http.StatusBadRequest,
					"message": "invalid X-Api-Gen-Option.",
				})
			}
		}

		res := new({{ .ResponseStructName }})
		return c.JSON(http.StatusOK, res)
	}
}
{{- end }}
