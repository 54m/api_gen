// Package {{ .Package }} ...
// generated version: {{ .AppVersion }}
package {{ .Package }}

import (
	"github.com/labstack/echo/v4"
	"{{ .ControllerPropsPackage }}"
)

// {{ .ControllerName }} ...
type {{ .ControllerName }} struct {
	*props.ControllerProps
}

// New{{ .ControllerName }} ...
func New{{ .ControllerName }}(cp *props.ControllerProps) *{{ .ControllerName }} {
	{{ .ControllerNameInitial }} := &{{ .ControllerName }}{
		ControllerProps: cp,
	}
	return {{ .ControllerNameInitial }}
}


// {{ .HandlerName }} ...
// @Summary WIP
// @Description WIP
// @Accept json
// @Produce json
{{- range $p := .RequestParams }}
// @Param {{ $p.Name }} {{ $p.Type }} {{ $p.DataType }} WIP:${isRequire} WIP:${description}
{{- end }}
// @Success 200 {object} {{ .ResponseStructName }}
// @Failure 400 {object} WIP
// @Router {{ .RawEndpointPath }} [{{ .HTTPMethod }}]
func ({{ .ControllerNameInitial }} *{{ .ControllerName }}) {{ .HandlerName }}(
	c echo.Context, req *{{ .RequestStructName }},
) (res *{{ .ResponseStructName }}, err error) {
	// API Error Usage: {{ .WrapperPackage }}
	//
	// return nil, wrapper.NewAPIError(http.StatusBadRequest)
	//
	// return nil, wrapper.NewAPIError(http.StatusBadRequest).SetError(err)
	//
	// body := map[string]interface{}{
	// 	"code": http.StatusBadRequest,
	// 	"message": "invalid request parameter.",
	// }
	// return nil, wrapper.NewAPIError(http.StatusBadRequest, body).SetError(err)
	{{- $fixme := "FIXME" }}
	panic("require implements.") // {{ $fixme }} require implements.
}
