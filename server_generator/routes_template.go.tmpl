// Code generated by server_generator. DO NOT EDIT.
// generated version: {{ .AppVersion }}

package {{ .Package }}

import (
	"net/http"

	"github.com/labstack/echo/v4"

	props "{{ .ControllerPropsPackage }}"
)

// Routes ...
type Routes struct {
	router *echo.Group
}

// NewRoutes ...
func NewRoutes(p *props.ControllerProps, router *echo.Group) *Routes {
	r := &Routes{
		router: router,
	}
{{- range .Controllers }}
	router.{{ .HTTPMethod }}("{{ .Endpoint }}", r.{{ .HandlerName }}(p))
{{- end }}
	return r
}
{{ range .Controllers }}
// {{ .HandlerName }} ...
func (r *Routes) {{ .HandlerName }}(p *props.ControllerProps) echo.HandlerFunc {
	i := New{{ .ControllerName }}(p)
	return func(c echo.Context) error {
		req := new({{ .RequestStructName }})
		if err := c.Bind(req); err != nil {
			return c.JSON(http.StatusBadRequest, map[string]interface{}{
				"code":    http.StatusBadRequest,
				"message": "invalid request.",
			})
		}
		res, err := i.{{ .HandlerName }}(c, req)
		if err != nil {
			return err
		}
		if res == nil {
			return nil
		}

		return c.JSON(http.StatusOK, res)
	}
}
{{- end }}
{{ range .Controllers }}
// I{{ .ControllerName }} ...
type I{{ .ControllerName }} interface {
	{{ .HandlerName }}(c echo.Context, req *{{ .RequestStructName }}) (res *{{ .ResponseStructName }}, err error)
}
{{- end }}
