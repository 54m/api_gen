// +build mock
// Code generated by server_generator. DO NOT EDIT.
// generated version: unknown

package sample

import (
	"io"
	"log"
	"net/http"
	"path/filepath"

	"github.com/go-generalize/api_gen/server_generator/sample/service"
	serviceStaticPage "github.com/go-generalize/api_gen/server_generator/sample/service/static_page"
	serviceUser "github.com/go-generalize/api_gen/server_generator/sample/service/user"
	serviceUser2 "github.com/go-generalize/api_gen/server_generator/sample/service/user2"
	serviceUser2UserID "github.com/go-generalize/api_gen/server_generator/sample/service/user2/_userID"
	serviceUser2UserIDJobID "github.com/go-generalize/api_gen/server_generator/sample/service/user2/_userID/_JobID"
	"github.com/labstack/echo/v4"
)

// Bootstrap ...
func MockBootstrap(e *echo.Echo, w io.Writer, jsonDir string) {
	if w != nil {
		log.SetOutput(w)
	}
	// error handling
	e.Use(func(before echo.HandlerFunc) echo.HandlerFunc {
		return func(c echo.Context) (err error) {
			defer func() {
				recoverErr := recover()
				if recoverErr == nil {
					return
				}
				if httpErr, ok := recoverErr.(*echo.HTTPError); ok {
					err = c.JSON(httpErr.Code, httpErr.Message)
				}
				log.Printf("panic: %#v", recoverErr)
				err = c.JSON(http.StatusInternalServerError, map[string]interface{}{
					"code":    http.StatusInternalServerError,
					"message": "internal server error.",
				})
			}()

			err = before(c)
			return err
		}
	})

	rootGroup := e.Group("")
	NewMockRoutes(rootGroup, filepath.Join(jsonDir, "/"), w)
	serviceGroup := rootGroup.Group("service/")
	service.NewMockRoutes(serviceGroup, filepath.Join(jsonDir, "/service"), w)
	serviceStaticPageGroup := serviceGroup.Group("static_page/")
	serviceStaticPage.NewMockRoutes(serviceStaticPageGroup, filepath.Join(jsonDir, "/service/static_page"), w)
	serviceUserGroup := serviceGroup.Group("user/")
	serviceUser.NewMockRoutes(serviceUserGroup, filepath.Join(jsonDir, "/service/user"), w)
	serviceUser2Group := serviceGroup.Group("user2/")
	serviceUser2.NewMockRoutes(serviceUser2Group, filepath.Join(jsonDir, "/service/user2"), w)
	serviceUser2UserIDGroup := serviceUser2Group.Group(":userID/")
	serviceUser2UserID.NewMockRoutes(serviceUser2UserIDGroup, filepath.Join(jsonDir, "/service/user2/_userID"), w)
	serviceUser2UserIDJobIDGroup := serviceUser2UserIDGroup.Group(":JobID/")
	serviceUser2UserIDJobID.NewMockRoutes(serviceUser2UserIDJobIDGroup, filepath.Join(jsonDir, "/service/user2/_userID/_JobID"), w)
}
