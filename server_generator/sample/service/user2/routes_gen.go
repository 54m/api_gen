// Code generated by server_generator. DO NOT EDIT.
// generated version: devel

package user2

import (
	"io"
	"log"
	"net/http"

	"github.com/go-generalize/api_gen/server_generator/sample/props"
	"github.com/go-generalize/api_gen/server_generator/sample/wrapper"
	"github.com/labstack/echo/v4"
)

// Routes ...
type Routes struct {
	router *echo.Group
}

// NewRoutes ...
func NewRoutes(p *props.ControllerProps, router *echo.Group, opts ...io.Writer) *Routes {
	if len(opts) > 0 {
		if w := opts[0]; w != nil {
			log.SetOutput(w)
		}
	}
	r := &Routes{
		router: router,
	}
	router.GET(":userID", r.GetUser(p))
	router.POST("update_user_name", r.PostUpdateUserName(p))
	router.POST("update_user_password", r.PostUpdateUserPassword(p))
	return r
}

// GetUser ...
func (r *Routes) GetUser(p *props.ControllerProps) echo.HandlerFunc {
	i := NewGetUserController(p)
	return func(c echo.Context) error {
		req := new(GetUserRequest)
		if err := c.Bind(req); err != nil {
			log.Printf("failed to JSON binding(/service/user2/{userID}): %+v", err)
			return c.JSON(http.StatusBadRequest, map[string]interface{}{
				"code":    http.StatusBadRequest,
				"message": "invalid request.",
			})
		}
		res, err := i.GetUser(c, req)
		if err != nil {
			if werr, ok := err.(*wrapper.APIError); ok {
				log.Printf("%+v", werr)
				return c.JSON(werr.Status, werr.Body)
			}
			return err
		}
		if res == nil {
			return nil
		}

		return c.JSON(http.StatusOK, res)
	}
}

// PostUpdateUserName ...
func (r *Routes) PostUpdateUserName(p *props.ControllerProps) echo.HandlerFunc {
	i := NewPostUpdateUserNameController(p)
	return func(c echo.Context) error {
		req := new(PostUpdateUserNameRequest)
		if err := c.Bind(req); err != nil {
			log.Printf("failed to JSON binding(/service/user2/update_user_name): %+v", err)
			return c.JSON(http.StatusBadRequest, map[string]interface{}{
				"code":    http.StatusBadRequest,
				"message": "invalid request.",
			})
		}
		res, err := i.PostUpdateUserName(c, req)
		if err != nil {
			if werr, ok := err.(*wrapper.APIError); ok {
				log.Printf("%+v", werr)
				return c.JSON(werr.Status, werr.Body)
			}
			return err
		}
		if res == nil {
			return nil
		}

		return c.JSON(http.StatusOK, res)
	}
}

// PostUpdateUserPassword ...
func (r *Routes) PostUpdateUserPassword(p *props.ControllerProps) echo.HandlerFunc {
	i := NewPostUpdateUserPasswordController(p)
	return func(c echo.Context) error {
		req := new(PostUpdateUserPasswordRequest)
		if err := c.Bind(req); err != nil {
			log.Printf("failed to JSON binding(/service/user2/update_user_password): %+v", err)
			return c.JSON(http.StatusBadRequest, map[string]interface{}{
				"code":    http.StatusBadRequest,
				"message": "invalid request.",
			})
		}
		res, err := i.PostUpdateUserPassword(c, req)
		if err != nil {
			if werr, ok := err.(*wrapper.APIError); ok {
				log.Printf("%+v", werr)
				return c.JSON(werr.Status, werr.Body)
			}
			return err
		}
		if res == nil {
			return nil
		}

		return c.JSON(http.StatusOK, res)
	}
}

// IGetUserController ...
type IGetUserController interface {
	GetUser(c echo.Context, req *GetUserRequest) (res *GetUserResponse, err error)
}

// IPostUpdateUserNameController ...
type IPostUpdateUserNameController interface {
	PostUpdateUserName(c echo.Context, req *PostUpdateUserNameRequest) (res *PostUpdateUserNameResponse, err error)
}

// IPostUpdateUserPasswordController ...
type IPostUpdateUserPasswordController interface {
	PostUpdateUserPassword(c echo.Context, req *PostUpdateUserPasswordRequest) (res *PostUpdateUserPasswordResponse, err error)
}
