// Code generated by server_generator. DO NOT EDIT.
// generated version: unknown

package service

import (
	"io"
	"log"
	"net/http"

	"github.com/labstack/echo/v4"

	props "github.com/go-generalize/api_gen/server_generator/sample/props"
)

// Routes ...
type Routes struct {
	router *echo.Group
}

// NewRoutes ...
func NewRoutes(p *props.ControllerProps, router *echo.Group, opts ...io.Writer) *Routes {
	if len(opts) > 0 {
		if w := opts[0]; w != nil {
			log.SetOutput(w)
		}
	}
	r := &Routes{
		router: router,
	}
	router.GET("article", r.GetArticle(p))
	return r
}

// GetArticle ...
func (r *Routes) GetArticle(p *props.ControllerProps) echo.HandlerFunc {
	i := NewGetArticleController(p)
	return func(c echo.Context) error {
		req := new(GetArticleRequest)
		if err := c.Bind(req); err != nil {
			log.Printf("failed to JSON binding(/service/article): %+v", err)
			return c.JSON(http.StatusBadRequest, map[string]interface{}{
				"code":    http.StatusBadRequest,
				"message": "invalid request.",
			})
		}
		res, err := i.GetArticle(c, req)
		if err != nil {
			return err
		}
		if res == nil {
			return nil
		}

		return c.JSON(http.StatusOK, res)
	}
}

// IGetArticleController ...
type IGetArticleController interface {
	GetArticle(c echo.Context, req *GetArticleRequest) (res *GetArticleResponse, err error)
}
