// THIS FILE IS A GENERATED CODE.
// DO NOT EDIT THIS CODE BY YOUR OWN HANDS
// generated version: {{ .AppVersion }}
{{- range $index, $elem := .Imports }}

import {{ "{" }}
{{ range $i, $pair := $elem.Pairs }}	{{ $pair.Name }} as {{ $pair.NameAs }},
{{ end }}{{ "}" }} from '{{ $elem.Path }}';
{{- end }}

export type ApiClientBeforeMiddleware =
	(httpMethod: string, endpoint: string, request: unknown) => Promise<boolean>;
export type ApiClientAfterMiddleware =
	(httpMethod: string, endpoint: string, request: unknown, response: unknown) => Promise<boolean>;

export interface middlewareSet {
	beforeMiddleware?: ApiClientBeforeMiddleware[];
	afterMiddleware?: ApiClientAfterMiddleware[];
}
{{ range $index, $elem := .ChildrenClients }}

class {{ $elem.Name }} {
	private beforeMiddleware: ApiClientBeforeMiddleware[] = [];
	private afterMiddleware: ApiClientAfterMiddleware[] = [];

{{- 	range $index, $elem := .Children }}
	public {{ $elem.Name }}: {{ $elem.ClassName }};
{{- 	end }}
	constructor(
		private headers: {[key: string]: string},
		private options: {[key: string]: any},
		private baseURL: string,
		middleware: middlewareSet
	) {
		this.beforeMiddleware = middleware.beforeMiddleware!;
		this.afterMiddleware = middleware.afterMiddleware!;
{{- 	if $elem.Children }}
		const childMiddlewareSet: middlewareSet = {
			beforeMiddleware: this.beforeMiddleware,
			afterMiddleware: this.afterMiddleware
		};
{{- 	end }}
{{-  	range $index, $elem := $elem.Children }}
		this.{{ $elem.Name }} = new {{ $elem.ClassName }}(
			headers,
			options,
			baseURL,
			childMiddlewareSet
		);
{{- 	end }}
	}

	getRequestObject(obj: any, routingPath: string[]): { [key: string]: any } {
		let res: { [key: string]: any } = {};
		Object.keys(obj).forEach((key) => {
			if (routingPath.indexOf(key) === -1) {
				res[key] = obj[key];
			}
		});
		return res;
	}
{{- 	range $index, $method := $elem.Methods }}

	async {{ $method.Name }}(
		param: {{ $method.RequestType }},
		headers?: {[key: string]: string},
		options?: {[key: string]: any}
	): Promise<{{ $method.ResponseType }}> {
	    const excludeParams: string[] = [{{ range $param := $method.URLParams }}'{{ $param }}', {{ end }}];
	    let mockHeaders: {[key: string]: string} = {};
	    if (options && options['mock_option']) {
			mockHeaders['Api-Gen-Option'] = JSON.stringify(options['mock_option']);
			delete options['mock_option'];
		}
		for (const m of this.beforeMiddleware) {
			await m('{{$method.Method}}', `${this.baseURL}{{ $method.Endpoint }}`, param);
		}
{{- 	if eq $method.Method "GET" }}
		const url = `${this.baseURL}{{ $method.Endpoint }}?` + (new URLSearchParams(this.getRequestObject(param, excludeParams))).toString();
{{- 	else }}
		const url = `${this.baseURL}{{ $method.Endpoint }}`;
{{-      end }}
		const resp = await fetch(
			url,
			{
				method: "{{ $method.Method }}",
{{- 	if ne $method.Method "GET" }}
				body: JSON.stringify(this.getRequestObject(param, excludeParams)),
{{-       end }}
				headers: {
					...this.headers,
					...headers,
					...mockHeaders,
				},
				...this.options,
				...options,
			}
		);

		if (Math.floor(resp.status / 100) !== 2) {
			const responseText = await resp.text();
			throw new ApiError(resp, responseText);
		}
{{- 	if eq .HasFields true }}
		const res = (await resp.json()) as {{ $method.ResponseType }};
{{- 	else }}
		await resp.text();
		const res = {} as {{ $method.ResponseType }};
{{- 	end }}
		for (const m of this.afterMiddleware) {
			await m('{{$method.Method}}', `${this.baseURL}{{ $method.Endpoint }}`, param, res);
		}
		return res;
	}
{{- 	end }}
}
{{- end }}

export class APIClient {
	private headers: {[key: string]: string};
	private options: {[key: string]: any};
	private baseURL: string;

	private beforeMiddleware: ApiClientBeforeMiddleware[] = [];
	private afterMiddleware: ApiClientAfterMiddleware[] = [];

{{- 	range $index, $elem := .Children }}

	public {{ $elem.Name }}: {{ $elem.ClassName }};
{{- 	end }}

	constructor(
		token?: string,
		commonHeaders?: {[key: string]: string},
		baseURL?: string,
		commonOptions: {[key: string]: any} = {},
		middleware?: middlewareSet
	) {
		const headers: {[key: string]: string} =  {
			'Content-Type': 'application/json',
			...commonHeaders,
		};

		if (token !== undefined) {
			headers['Authorization'] = 'Bearer ' + token;
		}

		this.baseURL =  (baseURL === undefined) ? "" : baseURL;
		this.options = commonOptions;
		this.headers = headers;

		if (middleware) {
			this.beforeMiddleware = middleware.beforeMiddleware ?? [];
			this.afterMiddleware = middleware.afterMiddleware ?? [];
		}
		const childMiddlewareSet: middlewareSet = {
			beforeMiddleware: this.beforeMiddleware,
			afterMiddleware: this.afterMiddleware
		};
{{- 	range $index, $elem := .Children }}

		this.{{ $elem.Name }} = new {{ $elem.ClassName }}(
			headers,
			this.options,
			this.baseURL,
			childMiddlewareSet
		);
{{- 	end }}
	}

	getRequestObject(obj: any, routingPath: string[]): { [key: string]: any } {
		let res: { [key: string]: any } = {};
		Object.keys(obj).forEach((key) => {
			if (routingPath.indexOf(key) === -1) {
				res[key] = obj[key];
			}
		});
		return res;
	}
{{- range $index, $method := .Methods }}

	async {{ $method.Name }}(
		param: {{ $method.RequestType }},
		headers?: {[key: string]: string},
		options?: {[key: string]: any}
	): Promise<{{ $method.ResponseType }}> {
	    const excludeParams: string[] = [{{ range $param := $method.URLParams }}'{{ $param }}', {{ end }}];
	    let mockHeaders: {[key: string]: string} = {};
	    if (options && options['mock_option']) {
			mockHeaders['Api-Gen-Option'] = JSON.stringify(options['mock_option']);
			delete options['mock_option'];
		}
		for (const m of this.beforeMiddleware) {
			await m('{{$method.Method}}', `${this.baseURL}{{ $method.Endpoint }}`, param);
		}
{{- 	if eq $method.Method "GET" }}
		const url = `${this.baseURL}{{ $method.Endpoint }}?` + (new URLSearchParams(this.getRequestObject(param, excludeParams))).toString();
{{- 	else }}
		const url = `${this.baseURL}{{ $method.Endpoint }}`;
{{      end }}
		const resp = await fetch(
			url,
			{
				method: "{{ $method.Method }}",
{{- 	if ne $method.Method "GET" }}
				body: JSON.stringify(this.getRequestObject(param, excludeParams)),
{{-       end }}
				headers: {
					...this.headers,
					...headers,
					...mockHeaders,
				},
				...this.options,
				...options,
			}
		);

		if (Math.floor(resp.status / 100) !== 2) {
			const responseText = await resp.text();
			throw new ApiError(resp, responseText);
		}

{{- if eq .HasFields true }}
		const res = (await resp.json()) as {{ $method.ResponseType }};
{{- else }}
		await resp.text();
		const res = {} as {{ $method.ResponseType }};
{{- end }}
		for (const m of this.afterMiddleware) {
			await m('{{$method.Method}}', `${this.baseURL}{{ $method.Endpoint }}`, param, res);
		}
		return res;
	}
{{- end }}
}

export class ApiError extends Error {
    private _statusCode: number;
    private _statusText: string;
    private _response: string;

    constructor(response: Response, responseText: string) {
        super();
        this._statusCode = response.status;
        this._statusText = response.statusText;
        this._response = responseText
    }

    get statusCode(): number {
        return this._statusCode;
    }

	get statusText(): string {
        return this._statusText;
    }

	get response(): string {
        return this._response;
    }
}

export interface MockOption {
	wait_ms: number;
	target_file: string;
}
