// THIS FILE IS A GENERATED CODE.
// DO NOT EDIT THIS CODE BY YOUR OWN HANDS
// generated version: {{ .AppVersion }}

{{range $index, $elem := .Imports}}import {{"{"}} {{$elem.Name}} as {{$elem.NameAs}} {{"}"}} from '{{$elem.Path}}';
export {{"{"}} {{$elem.Name}} as {{$elem.NameAs}} {{"}"}} from '{{$elem.Path}}';
{{end}}

{{range $index, $elem := .ChildrenClients}}
class {{$elem.Name}} {
{{range $index, $elem := .Children}}
	public {{$elem.Name}}: {{$elem.ClassName}};{{end}}
	constructor(private headers: {[key: string]: string}, private options: {[key: string]: any}, private baseURL: string) {
{{range $index, $elem := $elem.Children}}
		this.{{$elem.Name}} = new {{$elem.ClassName}}(headers, options, baseURL);{{end}}
	}

	getRequestObject(param: any, routingPath: string[]): { [key: string]: any } {
		const obj = param.toObject();
		let res: { [key: string]: any } = {};
		Object.keys(obj).forEach((key) => {
			if (routingPath.indexOf(key) === -1) {
				res[key] = obj[key];
			}
		});
		return res;
	}
{{range $index, $method := $elem.Methods}}
	async {{$method.Name}}(
		param: {{$method.RequestType}},
		headers?: {[key: string]: string},
		options?: {[key: string]: any}
	): Promise<{{$method.ResponseType}}> {
	    const excludeParams: string[] = [{{ range $param := $method.URLParams }}'{{ $param }}', {{ end }}];
{{if eq $method.Method "GET"}}		const resp = await fetch(
			`${this.baseURL}{{$method.Endpoint}}?` + (new URLSearchParams(this.getRequestObject(param, excludeParams))).toString(),
			{
				method: "{{$method.Method}}",
				headers: {
					...this.headers,
					...headers,
				},
				...this.options,
				...options,
			}
		);
{{else}}		const resp = await fetch(
			`${this.baseURL}{{$method.Endpoint}}`,
			{
				method: "{{$method.Method}}",
				body: JSON.stringify(this.getRequestObject(param, excludeParams)),
				headers: {
					...this.headers,
					...headers,
				},
				...this.options,
				...options,
			}
		);
{{end}}
		if (Math.floor(resp.status / 100) !== 2) {
			throw new Error(resp.statusText + ": " + await resp.text());
		}

		return new {{$method.ResponseType}}(await resp.json());
	}{{end}}
}
{{end}}

export class APIClient {
	private headers: {[key: string]: string};
	private options: {[key: string]: any};
	private baseURL: string;
{{range $index, $elem := .Children}}
	public {{$elem.Name}}: {{$elem.ClassName}};{{end}}

	constructor(
		token?: string,
		commonHeaders?: {[key: string]: string},
		baseURL?: string,
		commonOptions: {[key: string]: any} = {}
	) {
		const headers: {[key: string]: string} =  {
			'Content-Type': 'application/json',
			...commonHeaders,
		};

		if (token !== undefined) {
			headers['Authorization'] = 'Bearer ' + token;
		}

		this.baseURL =  (baseURL === undefined) ? "" : baseURL;
		this.options = commonOptions;
		this.headers = headers;

{{range $index, $elem := .Children}}
		this.{{$elem.Name}} = new {{$elem.ClassName}}(headers, this.options, this.baseURL);{{end}}
	}

	getRequestObject(param: any, routingPath: string[]): { [key: string]: any } {
		const obj = param.toObject();
		let res: { [key: string]: any } = {};
		Object.keys(obj).forEach((key) => {
			if (routingPath.indexOf(key) === -1) {
				res[key] = obj[key];
			}
		});
		return res;
	}
{{range $index, $method := .Methods}}
	async {{$method.Name}}(
		param: {{$method.RequestType}},
		headers?: {[key: string]: string},
		options?: {[key: string]: any}
	): Promise<{{$method.ResponseType}}> {
	    const excludeParams: string[] = [{{ range $param := $method.URLParams }}'{{ $param }}', {{ end }}];
{{if eq $method.Method "GET"}}		const resp = await fetch(
			`${this.baseURL}{{$method.Endpoint}}?` + (new URLSearchParams(this.getRequestObject(param, excludeParams))).toString(),
			{
				method: "{{$method.Method}}",
				headers: {
					...this.headers,
					...headers,
				},
				...this.options,
				...options,
			}
		);
{{else}}		const resp = await fetch(
			`${this.baseURL}{{$method.Endpoint}}`,
			{
				method: "{{$method.Method}}",
				body: JSON.stringify(this.getRequestObject(param, excludeParams)),
				headers: {
					...this.headers,
					...headers,
				},
				...this.options,
				...options,
			}
		);
{{end}}
		if (Math.floor(resp.status / 100) !== 2) {
			throw new Error(resp.statusText + ": " + await resp.text());
		}

		return new {{$method.ResponseType}}(await resp.json());
	}
{{end}}
}
